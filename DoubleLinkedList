class DoubleLinkedList {
    Node head, tail;
    int size = 0;

    class Node {
        int data;
        Node next = null;
        Node prev = null;
        Node(int data) {
            this.data = data;
        }
    }

    void insertAtStart(int data) {
        Node temp = new Node(data);
        if(head == null) {
            head = temp;
        } else {
            temp.next = head;
            head.prev = temp;
            head = temp;
        }
        size++;
    }

    void insertAtEnd(int data) {
        Node temp = new Node(data);
        Node pointer = head;
        if(head == null) {
            head = temp;
        } else {
            while(pointer.next != null) {
                pointer = pointer.next;
            }
            temp.prev = pointer;
            pointer.next = temp;
        }
        size++;
    }

    void insertAt(int data, int index) {
        Node temp = head;
        Node curr = new Node(data);
        if(head == null) {
            head = temp;
        } else {
            for(int i=0; i<index-1; i++) {
                temp = temp.next;
            }
            curr.prev = temp;
            curr.next = temp.next.next;
            temp.next = curr;
            temp.next.next.prev = curr;
        }
        size++;
    }

    void display() {
        Node temp = head;
        while(temp != null) {
            System.out.print(temp.data+" ");
            temp = temp.next;
        }
        System.out.println();
    }

    void deleteAtStart() {
        head = head.next;
        size--;
    }

    void deleteAtEnd() {
        Node temp = head;
        if(head == null) {
            System.out.println("List is empty.");
        } else {
            while(temp.next.next != null) {
                temp = temp.next;
            }
            temp.next = null;
        }
        size--;
    }

    void deleteAt(int index) {
        Node temp = head;
        if(head == null) {
            System.out.println("The list is empty.");
        } else {
            for(int i=0; i<index-1; i++) {
                temp = temp.next;
            }
           System.out.println(temp.data);
           temp.next = temp.next.next;
           temp.next.prev = temp;
        }
        size--;
    }

    int getElementAt(int index) {
        Node temp = head;
        for(int i=0; i< index; i++) {
            temp =temp.next;
        }
        return temp.data;
    }
}
